/**
 * ๐ Find Production Monitor Log File
 * ุงุจุญุซ ุนู ููู ูุฑุงูุจุฉ ุงูุฅูุชุงุฌ
 */

const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('๐ ุงูุจุญุซ ุนู ููู production-monitor.txt');
console.log('=' .repeat(50));

// 1. ูุณุงุฑุงุช ูุญุชููุฉ ููุจุญุซ
const possiblePaths = [
  // Development
  path.join(process.cwd(), 'production-monitor.txt'),

  // Production - ูุฌูุฏ ุงูุชุทุจูู
  path.join(process.execPath, '..', 'production-monitor.txt'),
  path.join(path.dirname(process.execPath), 'production-monitor.txt'),

  // Production - ูุฌูุฏ resources
  path.join(process.resourcesPath || '', 'production-monitor.txt'),
  path.join(path.dirname(process.execPath), 'resources', 'production-monitor.txt'),

  // Windows - ูุฌูุฏ AppData
  path.join(os.homedir(), 'AppData', 'Local', 'Programs', 'CASNOS-Display', 'production-monitor.txt'),
  path.join(os.homedir(), 'AppData', 'Local', 'Programs', 'CASNOS-Customer', 'production-monitor.txt'),
  path.join(os.homedir(), 'AppData', 'Local', 'Programs', 'CASNOS-Window', 'production-monitor.txt'),
  path.join(os.homedir(), 'AppData', 'Local', 'Programs', 'CASNOS-Admin', 'production-monitor.txt'),

  // Build directories
  path.join(process.cwd(), 'dist', 'Display', 'win-unpacked', 'production-monitor.txt'),
  path.join(process.cwd(), 'dist', 'Customer', 'win-unpacked', 'production-monitor.txt'),
  path.join(process.cwd(), 'dist', 'Window', 'win-unpacked', 'production-monitor.txt'),
  path.join(process.cwd(), 'dist', 'Admin', 'win-unpacked', 'production-monitor.txt')
];

console.log('\n๐ ูุณุงุฑุงุช ุงูุจุญุซ:');
console.log('- process.cwd():', process.cwd());
console.log('- process.execPath:', process.execPath);
console.log('- process.resourcesPath:', process.resourcesPath || 'undefined');
console.log('- __dirname:', __dirname);
console.log('- Home directory:', os.homedir());

console.log('\n๐ ุงูุจุญุซ ูู ุงููุณุงุฑุงุช ุงููุญุชููุฉ:');
const foundFiles = [];

possiblePaths.forEach((filePath, index) => {
  try {
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      const lastModified = stats.mtime.toLocaleString();
      const size = stats.size;

      console.log(`โ ${index + 1}. FOUND: ${filePath}`);
      console.log(`   ๐ Size: ${size} bytes`);
      console.log(`   ๐ Last Modified: ${lastModified}`);

      foundFiles.push({
        path: filePath,
        size: size,
        lastModified: lastModified
      });
    } else {
      console.log(`โ ${index + 1}. NOT FOUND: ${filePath}`);
    }
  } catch (error) {
    console.log(`โ ${index + 1}. ERROR: ${filePath} - ${error.message}`);
  }
});

console.log('\n' + '='.repeat(50));
if (foundFiles.length > 0) {
  console.log(`โ ุชู ุงูุนุซูุฑ ุนูู ${foundFiles.length} ููู(ุงุช):`)
  foundFiles.forEach((file, index) => {
    console.log(`${index + 1}. ${file.path}`);
    console.log(`   ๐ ${file.size} bytes | ๐ ${file.lastModified}`);
  });

  console.log('\n๐ ููุฑุงุกุฉ ูุญุชูู ุงูููู:');
  console.log('- ูู Windows: notepad "path/to/production-monitor.txt"');
  console.log('- ูู Command Prompt: type "path/to/production-monitor.txt"');
  console.log('- ูู PowerShell: Get-Content "path/to/production-monitor.txt"');

} else {
  console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃู ููู production-monitor.txt');
  console.log('๐ก ุงูููู ุณูุชู ุฅูุดุงุคู ุนูุฏ ุชุดุบูู ุงูุชุทุจูู ูู ุงูุฅูุชุงุฌ');
}

console.log('\n๐ฏ ูุชุณููู ุงูุนุซูุฑ ุนูู ุงููููุ ููููู:');
console.log('1. ุชุดุบูู ุงูุชุทุจูู ูุฑุฉ ูุงุญุฏุฉ');
console.log('2. ุชุดุบูู ูุฐุง ุงูุฃูุฑ ูุฑุฉ ุฃุฎุฑู');
console.log('3. ุฃู ุงูุจุญุซ ูู ูุฌูุฏ ุงูุชุทุจูู ุงููุซุจุช');
