#!/usr/bin/env node
/**
 * üèóÔ∏è Enhanced Build All Screens Script
 * ŸäŸÜÿ¥ÿ¶ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¥ÿßÿ¥ÿßÿ™ ŸÉŸÖŸÑŸÅÿßÿ™ ÿ™ŸÜŸÅŸäÿ∞Ÿäÿ© ŸÖŸÜŸÅÿµŸÑÿ© ŸÖÿπ ÿ™ŸÉŸàŸäŸÜÿßÿ™ ŸÖÿÆÿµÿµÿ©
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs-extra');
const path = require('path');

const SCREENS = [
  {
    name: 'Display',
    mode: 'display',
    configFile: 'display.config.js',
    description: 'ÿ¥ÿßÿ¥ÿ© ÿßŸÑÿπÿ±ÿ∂ ŸÖÿπ ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑŸÖÿØŸÖÿ¨',
    includeServer: true,
    priority: 1 // Build first (contains server)
  },
  {
    name: 'Customer',
    mode: 'customer',
    configFile: 'customer.config.js', 
    description: 'ŸÜÿ∏ÿßŸÖ ÿßŸÑÿπŸÖŸÑÿßÿ° ŸÑÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ÿ∞ÿßŸÉÿ±',
    includeServer: false,
    priority: 2
  },
  {
    name: 'Window',
    mode: 'window',
    configFile: 'window.config.js',
    description: 'ŸÖÿ≠ÿ∑ÿ© ÿ¥ÿ®ÿßŸÉ ÿßŸÑÿÆÿØŸÖÿ©',
    includeServer: false,
    priority: 3
  },
  {
    name: 'Admin',
    mode: 'admin',
    configFile: 'admin.config.js',
    description: 'ŸÑŸàÿ≠ÿ© ÿßŸÑÿ•ÿØÿßÿ±ÿ© ŸàÿßŸÑÿ™ÿ≠ŸÉŸÖ',
    includeServer: false,
    priority: 4
  }
];

const rootDir = process.cwd();
const distDir = path.join(rootDir, 'dist');

function log(message, type = 'INFO') {
  const colors = {
    INFO: '\x1b[36m',
    SUCCESS: '\x1b[32m',
    ERROR: '\x1b[31m',
    WARNING: '\x1b[33m',
    STEP: '\x1b[35m'
  };
  const reset = '\x1b[0m';
  const timestamp = new Date().toLocaleTimeString();
  console.log(`${colors[type]}[${timestamp}] ${message}${reset}`);
}

function runCommand(command, options = {}) {
  return new Promise((resolve, reject) => {
    log(`Running: ${command}`, 'INFO');
    
    try {
      execSync(command, {
        stdio: 'inherit',
        ...options
      });
      resolve();
    } catch (error) {
      reject(error);
    }
  });
}

async function buildScreen(screen) {
  try {
    log(`üèóÔ∏è Building ${screen.name} Screen (${screen.description})...`, 'STEP');
    
    const configPath = path.join(rootDir, 'build-configs', screen.configFile);
    
    // Verify config file exists
    if (!await fs.pathExists(configPath)) {
      throw new Error(`Config file not found: ${configPath}`);
    }
    
    // Set environment variables
    const env = {
      ...process.env,
      SCREEN_MODE: screen.mode,
      NODE_ENV: 'production'
    };

    // Build the main application
    log(`ÔøΩ Building application for ${screen.name}...`, 'INFO');
    await runCommand('npm run build', { env });
    
    // Build server if needed
    if (screen.includeServer) {
      log(`üåê Building server for ${screen.name}...`, 'INFO');
      await runCommand('npm run build:server', { env });
    }

    // Build the executable with custom config
    log(`üîß Creating executable for ${screen.name}...`, 'INFO');
    const builderCmd = `electron-builder --config "${configPath}"`;
    await runCommand(builderCmd, { env });
    
    // Create README file
    await createReadmeFile(screen);
    
    log(`‚úÖ ${screen.name} built successfully!`, 'SUCCESS');
    
  } catch (error) {
    log(`‚ùå Failed to build ${screen.name}: ${error.message}`, 'ERROR');
    throw error;
  }
}

async function createReadmeFile(screen) {
  const distPath = path.join(distDir, screen.name);
  const readmePath = path.join(distPath, 'README.md');
  
  const readmeContent = `# ${screen.name} Screen - CASNOS

## üìù ÿßŸÑŸàÿµŸÅ
${screen.description}

## üñ•Ô∏è ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
- **ŸÜŸàÿπ ÿßŸÑÿ¥ÿßÿ¥ÿ©:** ${screen.mode}
- **ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑŸÖÿØŸÖÿ¨:** ${screen.includeServer ? 'ŸÜÿπŸÖ ‚úÖ' : 'ŸÑÿß ‚ùå'}
- **ÿßŸÑÿ•ÿµÿØÿßÿ±:** 1.0.0

## ÔøΩüöÄ ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ

### ÿßŸÑŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™
- Windows 10/11 (64-bit)
- ÿ∞ÿßŸÉÿ±ÿ© ŸàÿµŸàŸÑ ÿπÿ¥Ÿàÿßÿ¶Ÿä: 4GB ŸÉÿ≠ÿØ ÿ£ÿØŸÜŸâ
- ŸÖÿ≥ÿßÿ≠ÿ© ŸÅÿßÿ±ÿ∫ÿ©: 500MB

### ÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
1. ŸÇŸÖ ÿ®ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞Ÿä
2. ${screen.includeServer 
    ? 'ÿ≥Ÿäÿ®ÿØÿ£ ÿßŸÑÿÆÿßÿØŸÖ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ŸÖÿπ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ (ŸÇÿØ Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ 5-10 ÿ´ŸàÿßŸÜŸç)'
    : 'ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ™ÿ¥ÿ∫ŸäŸÑ CASNOS Display System ÿ£ŸàŸÑÿßŸã (ŸÑŸÑÿÆÿßÿØŸÖ)'}
3. ÿßÿ™ÿ®ÿπ ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ¥ÿßÿ¥ÿ©

${screen.includeServer ? `
### üåê ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿÆÿßÿØŸÖ (Display Screen ŸÅŸÇÿ∑)
- ÿßŸÑÿÆÿßÿØŸÖ ÿ≥ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜŸÅÿ∞: 3001
- ÿπŸÜŸàÿßŸÜ IP ÿ≥Ÿäÿ™ŸÖ ÿπÿ±ÿ∂Ÿá ŸÅŸä Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
- ÿ£ÿ¨Ÿáÿ≤ÿ© ÿ£ÿÆÿ±Ÿâ ŸäŸÖŸÉŸÜŸáÿß ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿπÿ®ÿ± UDP Discovery
` : `
### üîó ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¥ÿ®ŸÉÿ©
- Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿ¨Ÿáÿßÿ≤ Display Screen ŸäÿπŸÖŸÑ ÿπŸÑŸâ ŸÜŸÅÿ≥ ÿßŸÑÿ¥ÿ®ŸÉÿ©
- ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿÆÿßÿØŸÖ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã
- ŸÅŸä ÿ≠ÿßŸÑÿ© ÿπÿØŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿÆÿßÿØŸÖÿå ŸäŸÖŸÉŸÜ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿßŸÑŸäÿØŸàŸä
`}

## üõ†Ô∏è ÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°

### ŸÖÿ¥ÿßŸÉŸÑ ÿ¥ÿßÿ¶ÿπÿ©
- **ŸÑÿß ŸäŸÖŸÉŸÜ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿÆÿßÿØŸÖ:** ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ™ÿ¥ÿ∫ŸäŸÑ Display Screen ÿ£ŸàŸÑÿßŸã
- **ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ∑ÿ®ÿßÿπÿ©:** ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ∑ÿßÿ®ÿπÿ© ŸÅŸä ÿßŸÑŸÜÿ∏ÿßŸÖ
- **ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿµŸàÿ™:** ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿµŸàÿ™ ŸÅŸä Windows

### ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™
- ŸÖŸàŸÇÿπ ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™: \`%APPDATA%\\CASNOS\\logs\`
- ŸÖŸÑŸÅ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™: \`%APPDATA%\\CASNOS\\config.json\`

## üìû ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä
ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸäÿå ÿ™ŸàÿßÿµŸÑ ŸÖÿπ ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±.

---
**ÿ™ŸÖ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°:** ${new Date().toLocaleDateString('ar-SA')}  
**ÿßŸÑÿ®ŸÜÿßÿ° ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä:** CASNOS Build System v1.0
`;

  await fs.writeFile(readmePath, readmeContent, 'utf8');
  log(`üìù README created for ${screen.name}`, 'INFO');
}

async function createMasterReadme() {
  const masterReadmePath = path.join(distDir, 'README.md');
  
  const content = `# üéØ CASNOS - ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ÿ∑Ÿàÿßÿ®Ÿäÿ± ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±

## üìÅ ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ™Ÿàÿ≤Ÿäÿπ

ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° 4 ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ŸÖŸÜŸÅÿµŸÑÿ©ÿå ŸÉŸÑ Ÿàÿßÿ≠ÿØ ŸÅŸä ŸÖÿ¨ŸÑÿØ ŸÖŸÜŸÅÿµŸÑ:

${SCREENS.map(screen => `
### üì∫ ${screen.name}/
- **ÿßŸÑŸàÿµŸÅ:** ${screen.description}
- **ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞Ÿä:** \`${screen.name}/CASNOS ${screen.name}*.exe\`
- **ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑŸÖÿØŸÖÿ¨:** ${screen.includeServer ? '‚úÖ ŸÜÿπŸÖ' : '‚ùå ŸÑÿß'}
- **ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ:** ${screen.priority}
`).join('')}

## üöÄ ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖŸàÿµŸâ ÿ®Ÿá

1. **ÿ£ŸàŸÑÿßŸã:** Display Screen (Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿßŸÑÿÆÿßÿØŸÖ)
2. **ÿ´ÿßŸÜŸäÿßŸã:** Customer Screen (ŸÑÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ÿ∞ÿßŸÉÿ±)
3. **ÿ´ÿßŸÑÿ´ÿßŸã:** Window Screens (ŸÑŸÑŸÖŸàÿ∏ŸÅŸäŸÜ)
4. **ÿ£ÿÆŸäÿ±ÿßŸã:** Admin Screen (ŸÑŸÑÿ•ÿØÿßÿ±ÿ©)

## üåê ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¥ÿ®ŸÉÿ©

- ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿπŸÑŸâ ŸÜŸÅÿ≥ ÿßŸÑÿ¥ÿ®ŸÉÿ© ÿßŸÑŸÖÿ≠ŸÑŸäÿ©
- Display Screen ŸäÿπŸÖŸÑ ŸÉÿÆÿßÿØŸÖ ŸÖÿ±ŸÉÿ≤Ÿä
- ÿ®ÿßŸÇŸä ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿ™ÿ™ÿµŸÑ ÿ®ŸÄ Display Screen ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã

## üìã ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ŸÖŸáŸÖÿ©

- ŸÑÿß ÿ™ŸÇŸÖ ÿ®ÿ™ÿ¥ÿ∫ŸäŸÑ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ Display Screen Ÿàÿßÿ≠ÿØ ÿπŸÑŸâ ŸÜŸÅÿ≥ ÿßŸÑÿ¥ÿ®ŸÉÿ©
- ŸäŸÖŸÉŸÜ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿπÿØÿ© Customer/Window/Admin screens ÿ≠ÿ≥ÿ® ÿßŸÑÿ≠ÿßÿ¨ÿ©
- ŸÉŸÑ ÿ™ÿ∑ÿ®ŸäŸÇ ŸÑŸá ŸÖŸÑŸÅ README ŸÖŸÜŸÅÿµŸÑ ÿ®ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ

---
**ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ®ŸÜÿßÿ°:** ${new Date().toLocaleDateString('ar-SA')}  
**ÿßŸÑÿ•ÿµÿØÿßÿ±:** 1.0.0
`;

  await fs.writeFile(masterReadmePath, content, 'utf8');
  log('üìö Master README created', 'SUCCESS');
}

async function buildAllScreens() {
  try {
    log('üöÄ Starting CASNOS Multi-Screen Build Process...', 'STEP');
    
    // Clean dist directory
    log('üßπ Cleaning previous builds...', 'INFO');
    await fs.remove(distDir);
    await fs.ensureDir(distDir);

    // Sort screens by priority (Display first)
    const sortedScreens = SCREENS.sort((a, b) => a.priority - b.priority);
    
    // Build each screen
    for (const screen of sortedScreens) {
      await buildScreen(screen);
    }
    
    // Create master README
    await createMasterReadme();
    
    // Display final summary
    log('üéâ All screens built successfully!', 'SUCCESS');
    log('üìÅ Build output structure:', 'INFO');
    
    SCREENS.forEach(screen => {
      log(`   üìÇ dist/${screen.name}/ - ${screen.description}`, 'INFO');
      if (screen.includeServer) {
        log(`      ‚îî‚îÄ‚îÄ üåê Server included`, 'INFO');
      }
    });
    
    log('\nüìã Next Steps:', 'STEP');
    log('1. Test Display Screen first (contains server)', 'INFO');
    log('2. Test other screens on same network', 'INFO');
    log('3. Deploy to target machines', 'INFO');
    
  } catch (error) {
    log(`üí• Build process failed: ${error.message}`, 'ERROR');
    process.exit(1);
  }
}

// Add cleanup handler
process.on('SIGINT', () => {
  log('\n‚èπÔ∏è Build process interrupted', 'WARNING');
  process.exit(1);
});

// Run the build process
if (require.main === module) {
  buildAllScreens();
}
