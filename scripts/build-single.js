#!/usr/bin/env node
/**
 * üéØ Build Single Screen Script
 * ŸäŸÜÿ¥ÿ¶ ÿ¥ÿßÿ¥ÿ© Ÿàÿßÿ≠ÿØÿ© ŸÅŸÇÿ∑
 *
 * Usage: node scripts/build-single.js [screen-name]
 * Example: node scripts/build-single.js display
 */

const { execSync } = require('child_process');
const fs = require('fs-extra');
const path = require('path');

// Available screens configuration
const AVAILABLE_SCREENS = {
  display: {
    name: 'Display',
    mode: 'display',
    configFile: 'display.config.js',
    description: 'ÿ¥ÿßÿ¥ÿ© ÿßŸÑÿπÿ±ÿ∂ ŸÖÿπ ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑŸÖÿØŸÖÿ¨'
  },
  customer: {
    name: 'Customer',
    mode: 'customer',
    configFile: 'customer.config.js',
    description: 'ŸÜÿ∏ÿßŸÖ ÿßŸÑÿπŸÖŸÑÿßÿ° ŸÑÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ÿ∞ÿßŸÉÿ±'
  },
  window: {
    name: 'Window',
    mode: 'window',
    configFile: 'window.config.js',
    description: 'ŸÖÿ≠ÿ∑ÿ© ÿ¥ÿ®ÿßŸÉ ÿßŸÑÿÆÿØŸÖÿ©'
  },
  admin: {
    name: 'Admin',
    mode: 'admin',
    configFile: 'admin.config.js',
    description: 'ŸÑŸàÿ≠ÿ© ÿßŸÑÿ•ÿØÿßÿ±ÿ© ŸàÿßŸÑÿ™ÿ≠ŸÉŸÖ'
  }
};

function log(message, type = 'INFO') {
  const colors = {
    INFO: '\x1b[36m',
    SUCCESS: '\x1b[32m',
    ERROR: '\x1b[31m',
    WARNING: '\x1b[33m',
    STEP: '\x1b[35m'
  };
  const reset = '\x1b[0m';
  const timestamp = new Date().toLocaleTimeString();
  console.log(`${colors[type]}[${timestamp}] ${message}${reset}`);
}

function showUsage() {
  console.log(`
üéØ CASNOS Single Screen Builder

Usage: node scripts/build-single.js [screen-name]

Available screens:
${Object.entries(AVAILABLE_SCREENS).map(([key, screen]) =>
  `  ${key.padEnd(10)} - ${screen.description}`
).join('\n')}

Examples:
  node scripts/build-single.js display   # Build Display screen with server
  node scripts/build-single.js customer  # Build Customer screen only
  node scripts/build-single.js window    # Build Window screen only
  node scripts/build-single.js admin     # Build Admin screen only
`);
}

async function buildSingleScreen(screenKey) {
  const screen = AVAILABLE_SCREENS[screenKey];

  if (!screen) {
    log(`‚ùå Unknown screen: ${screenKey}`, 'ERROR');
    log(`Available screens: ${Object.keys(AVAILABLE_SCREENS).join(', ')}`, 'INFO');
    return false;
  }

  try {
    log(`üéØ Building ${screen.name} Screen Only...`, 'STEP');
    log(`üìù Description: ${screen.description}`, 'INFO');

    const rootDir = process.cwd();
    const configPath = path.join(rootDir, 'build-configs', screen.configFile);

    // Verify config file exists
    if (!await fs.pathExists(configPath)) {
      throw new Error(`Config file not found: ${configPath}`);
    }

    // Set environment variables
    const env = {
      ...process.env,
      SCREEN_MODE: screen.mode,
      NODE_ENV: 'production'
    };

    // Clean only this screen's output directory
    const distDir = path.join(rootDir, 'dist', screen.name);
    log(`üßπ Cleaning ${screen.name} build directory...`, 'INFO');
    await fs.remove(distDir);
    await fs.ensureDir(distDir);

    // Build the main application
    log(`üì¶ Building application...`, 'INFO');
    execSync('npm run build', { stdio: 'inherit', env });

    // Build the executable with custom config
    log(`üîß Creating executable package...`, 'INFO');
    const builderCmd = `npx electron-builder --config "${configPath}"`;
    execSync(builderCmd, { stdio: 'inherit', env });

    // Create README file
    await createReadmeFile(screen, distDir);

    log(`‚úÖ ${screen.name} screen built successfully!`, 'SUCCESS');
    log(`üìÅ Output location: dist/${screen.name}/`, 'INFO');

    if (screen.includeServer) {
      log(`üåê This build includes the server - run this first!`, 'WARNING');
    } else {
      log(`üîó This build requires Display screen to be running for server connection`, 'WARNING');
    }

    return true;

  } catch (error) {
    log(`‚ùå Failed to build ${screen.name}: ${error.message}`, 'ERROR');
    return false;
  }
}

async function createReadmeFile(screen, distPath) {
  const readmePath = path.join(distPath, 'README.md');

  const readmeContent = `# ${screen.name} Screen - CASNOS

## üìù ÿßŸÑŸàÿµŸÅ
${screen.description}

## üñ•Ô∏è ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
- **ŸÜŸàÿπ ÿßŸÑÿ¥ÿßÿ¥ÿ©:** ${screen.mode}
- **ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑŸÖÿØŸÖÿ¨:** ${screen.includeServer ? 'ŸÜÿπŸÖ ‚úÖ' : 'ŸÑÿß ‚ùå'}
- **ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ®ŸÜÿßÿ°:** ${new Date().toLocaleDateString('ar-SA')}

## üöÄ ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ

### ÿßŸÑŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™
- Windows 10/11 (64-bit)
- ÿ∞ÿßŸÉÿ±ÿ© ŸàÿµŸàŸÑ ÿπÿ¥Ÿàÿßÿ¶Ÿä: 4GB ŸÉÿ≠ÿØ ÿ£ÿØŸÜŸâ
- ŸÖÿ≥ÿßÿ≠ÿ© ŸÅÿßÿ±ÿ∫ÿ©: 500MB

### ÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
1. ŸÇŸÖ ÿ®ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞Ÿä
2. ${screen.includeServer
    ? 'ÿ≥Ÿäÿ®ÿØÿ£ ÿßŸÑÿÆÿßÿØŸÖ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ŸÖÿπ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ (ŸÇÿØ Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ 5-10 ÿ´ŸàÿßŸÜŸç)'
    : 'ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ™ÿ¥ÿ∫ŸäŸÑ CASNOS Display System ÿ£ŸàŸÑÿßŸã (ŸÑŸÑÿÆÿßÿØŸÖ)'}
3. ÿßÿ™ÿ®ÿπ ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ¥ÿßÿ¥ÿ©

${screen.includeServer ? `
### üåê ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿÆÿßÿØŸÖ
- ÿßŸÑÿÆÿßÿØŸÖ ÿ≥ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜŸÅÿ∞: 3001
- ÿπŸÜŸàÿßŸÜ IP ÿ≥Ÿäÿ™ŸÖ ÿπÿ±ÿ∂Ÿá ŸÅŸä Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
- ÿ£ÿ¨Ÿáÿ≤ÿ© ÿ£ÿÆÿ±Ÿâ ŸäŸÖŸÉŸÜŸáÿß ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿπÿ®ÿ± UDP Discovery
` : `
### üîó ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¥ÿ®ŸÉÿ©
- Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿ¨Ÿáÿßÿ≤ Display Screen ŸäÿπŸÖŸÑ ÿπŸÑŸâ ŸÜŸÅÿ≥ ÿßŸÑÿ¥ÿ®ŸÉÿ©
- ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿÆÿßÿØŸÖ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã
- ŸÅŸä ÿ≠ÿßŸÑÿ© ÿπÿØŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿÆÿßÿØŸÖÿå ŸäŸÖŸÉŸÜ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿßŸÑŸäÿØŸàŸä
`}

## üìû ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä
ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸäÿå ÿ™ŸàÿßÿµŸÑ ŸÖÿπ ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±.

---
**ÿßŸÑÿ®ŸÜÿßÿ° ÿßŸÑŸÅÿ±ÿØŸä:** ÿ™ŸÖ ÿ®ŸÜÿßÿ° Ÿáÿ∞Ÿá ÿßŸÑÿ¥ÿßÿ¥ÿ© ŸÖŸÜŸÅÿµŸÑÿ©
**ÿßŸÑŸÜÿ≥ÿÆÿ©:** 1.0.0
`;

  await fs.writeFile(readmePath, readmeContent, 'utf8');
  log(`üìù README created`, 'INFO');
}

// Main execution
async function main() {
  const screenArg = process.argv[2];

  if (!screenArg) {
    showUsage();
    process.exit(1);
  }

  if (screenArg === '--help' || screenArg === '-h') {
    showUsage();
    process.exit(0);
  }

  const success = await buildSingleScreen(screenArg.toLowerCase());
  process.exit(success ? 0 : 1);
}

// Cleanup handler
process.on('SIGINT', () => {
  log('\n‚èπÔ∏è Build process interrupted', 'WARNING');
  process.exit(1);
});

if (require.main === module) {
  main();
}
