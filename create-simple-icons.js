const fs = require('fs');
const path = require('path');

// ÿ•ŸÜÿ¥ÿßÿ° ÿ£ŸäŸÇŸàŸÜÿ© ICO ÿ®ÿ≥Ÿäÿ∑ÿ© (16x16 ÿ®ŸÉÿ≥ŸÑ)
// Ÿáÿ∞Ÿá ÿ£ŸäŸÇŸàŸÜÿ© ICO ÿ®ÿ≥Ÿäÿ∑ÿ© ÿ®ÿ™ŸÜÿ≥ŸäŸÇ base64
const simpleIcoData = Buffer.from([
  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x68, 0x04,
  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C,
  0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x4D, 0x7C, 0xFE, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]);

async function createSimpleIcons() {
  try {
    console.log('üé® Creating simple icons...');

    // ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ¨ŸÑÿØ build
    const buildDir = path.join(__dirname, 'build');
    if (!fs.existsSync(buildDir)) {
      fs.mkdirSync(buildDir, { recursive: true });
    }

    // ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ICO ÿ®ÿ≥Ÿäÿ∑
    const icoPath = path.join(__dirname, 'build/icon.ico');
    fs.writeFileSync(icoPath, simpleIcoData);
    console.log('‚úÖ Simple ICO icon created:', icoPath);

    // ŸÜÿ≥ÿÆ PNG ŸÖŸÜ ÿßŸÑŸÄ logo
    const logoPath = path.join(__dirname, 'resources/assets/logo.png');
    const pngPath = path.join(__dirname, 'build/icon.png');

    if (fs.existsSync(logoPath)) {
      fs.copyFileSync(logoPath, pngPath);
      console.log('‚úÖ PNG icon copied:', pngPath);
    } else {
      console.log('‚ö†Ô∏è  Logo not found, creating simple PNG...');
      // ÿ•ŸÜÿ¥ÿßÿ° PNG ÿ®ÿ≥Ÿäÿ∑ (1x1 ÿ®ŸÉÿ≥ŸÑ ÿ£ÿ≤ÿ±ŸÇ)
      const simplePng = Buffer.from([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
        0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x91, 0x68,
        0x36, 0x00, 0x00, 0x00, 0x1D, 0x49, 0x44, 0x41, 0x54, 0x28, 0x91, 0x63, 0x7C, 0x4D, 0xFE, 0xFF,
        0x7F, 0x06, 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ]);
      fs.writeFileSync(pngPath, simplePng);
      console.log('‚úÖ Simple PNG icon created:', pngPath);
    }

    // ÿ•ŸÜÿ¥ÿßÿ° ICNS ŸÑŸÑŸÄ Mac (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)
    const icnsPath = path.join(__dirname, 'build/icon.icns');
    const icnsData = Buffer.from('icns\x00\x00\x00\x10'); // ŸÖÿØÿÆŸÑ ICNS ÿ®ÿ≥Ÿäÿ∑
    fs.writeFileSync(icnsPath, icnsData);
    console.log('‚úÖ Simple ICNS icon created:', icnsPath);

    console.log('üéâ All icons created successfully!');

  } catch (error) {
    console.error('‚ùå Error creating icons:', error);
  }
}

createSimpleIcons();
